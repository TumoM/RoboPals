{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","this","props","robots","name","email","id","className","src","alt","React","Component","CardList","cardComponent","map","user","index","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","res","json","users","filtered","filter","robot","toLowerCase","includes","toLocaleLowerCase","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1ec26bcf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Card extends React.Component {\r\n    render(){\r\n        const {name, email, id} = this.props.robots;\r\n        return(\r\n            <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n                <img src={`https://robohash.org/${id}?size=200x200`} alt=\"A Robot\"></img>\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","\r\nimport React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nclass CardList extends React.Component {\r\n    render(){\r\n\r\n        const cardComponent = this.props.robots.map((user, index) =>{\r\n            return <Card key={index} robots={this.props.robots[index]}/>\r\n\r\n        })\r\n        return(\r\n            <div>\r\n                {cardComponent}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CardList;","import React, {Component} from 'react';\r\n\r\nclass SearchBox extends Component {\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"pa4\">\r\n                <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type='search' \r\n                placeholder='search robots.' \r\n                onChange={this.props.searchChange}\r\n                 />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '5px solid black', height:'800px'}}>\r\n           {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport \"./App.css\";\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots:[],\r\n            searchfield: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users/\")\r\n            .then(res => { return res.json();})\r\n            .then(users => {this.setState({robots: users}) })\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({\r\n            searchfield:event.target.value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        const filtered = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLocaleLowerCase())\r\n        })\r\n        if (this.state.robots.length === 0){\r\n            return <h1>Loading...</h1>\r\n        }\r\n        else return(\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">RoboPals</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots={filtered}/>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<div>\r\n    <App/>\r\n\r\n</div> , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}